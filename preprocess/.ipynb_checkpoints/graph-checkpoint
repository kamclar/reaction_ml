{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class MolGraph(object):\n",
    "    def __init__(self):\n",
    "        self.nodes = {} # dict of lists of nodes, keyed by node type\n",
    "\n",
    "    def new_node(self, ntype, features=None, rdkit_ix=None):\n",
    "        new_node = Node(ntype, features, rdkit_ix)\n",
    "        self.nodes.setdefault(ntype, []).append(new_node)\n",
    "        return new_node\n",
    "\n",
    "    def add_subgraph(self, subgraph):\n",
    "        old_nodes = self.nodes\n",
    "        new_nodes = subgraph.nodes\n",
    "        for ntype in set(old_nodes.keys()) | set(new_nodes.keys()):\n",
    "            old_nodes.setdefault(ntype, []).extend(new_nodes.get(ntype, []))\n",
    "\n",
    "    def sort_nodes_by_degree(self, ntype):\n",
    "        nodes_by_degree = {i : [] for i in degrees}\n",
    "        for node in self.nodes[ntype]:\n",
    "            nodes_by_degree[len(node.get_neighbors(ntype))].append(node)\n",
    "\n",
    "        new_nodes = []\n",
    "        for degree in degrees:\n",
    "            cur_nodes = nodes_by_degree[degree]\n",
    "            self.nodes[(ntype, degree)] = cur_nodes\n",
    "            new_nodes.extend(cur_nodes)\n",
    "\n",
    "        self.nodes[ntype] = new_nodes\n",
    "\n",
    "    def feature_array(self, ntype):\n",
    "        assert ntype in self.nodes\n",
    "        return np.array([node.features for node in self.nodes[ntype]])\n",
    "\n",
    "    def rdkit_ix_array(self):\n",
    "        return np.array([node.rdkit_ix for node in self.nodes['atom']])\n",
    "\n",
    "    def neighbor_list(self, self_ntype, neighbor_ntype):\n",
    "        assert self_ntype in self.nodes and neighbor_ntype in self.nodes\n",
    "        neighbor_idxs = {n : i for i, n in enumerate(self.nodes[neighbor_ntype])}\n",
    "        return [[neighbor_idxs[neighbor]\n",
    "                 for neighbor in self_node.get_neighbors(neighbor_ntype)]\n",
    "                for self_node in self.nodes[self_ntype]]\n",
    "\n",
    "class Node(object):\n",
    "    __slots__ = ['ntype', 'features', '_neighbors', 'rdkit_ix']\n",
    "    def __init__(self, ntype, features, rdkit_ix):\n",
    "        self.ntype = ntype\n",
    "        self.features = features\n",
    "        self._neighbors = []\n",
    "        self.rdkit_ix = rdkit_ix\n",
    "\n",
    "    def add_neighbors(self, neighbor_list):\n",
    "        for neighbor in neighbor_list:\n",
    "            self._neighbors.append(neighbor)\n",
    "            neighbor._neighbors.append(self)\n",
    "\n",
    "    def get_neighbors(self, ntype):\n",
    "        return [n for n in self._neighbors if n.ntype == ntype]\n",
    "\n",
    "def graph_from_smiles_tuple(smiles_tuple):\n",
    "    graph_list = [graph_from_smiles(s) for s in smiles_tuple]\n",
    "    big_graph = MolGraph()\n",
    "    for subgraph in graph_list:\n",
    "        big_graph.add_subgraph(subgraph)\n",
    "\n",
    "    # This sorting allows an efficient (but brittle!) indexing later on.\n",
    "    big_graph.sort_nodes_by_degree('atom')\n",
    "    return big_graph\n",
    "def graph_from_smiles(smiles):\n",
    "    graph = MolGraph()\n",
    "    mol = MolFromSmiles(smiles)\n",
    "    if not mol:\n",
    "        raise ValueError(\"Could not parse SMILES string:\", smiles)\n",
    "    atoms_by_rd_idx = {}\n",
    "    for atom in mol.GetAtoms():\n",
    "        new_atom_node = graph.new_node('atom', features=atom_features(atom), rdkit_ix=atom.GetIdx())\n",
    "        atoms_by_rd_idx[atom.GetIdx()] = new_atom_node\n",
    "\n",
    "    for bond in mol.GetBonds():\n",
    "        atom1_node = atoms_by_rd_idx[bond.GetBeginAtom().GetIdx()]\n",
    "        atom2_node = atoms_by_rd_idx[bond.GetEndAtom().GetIdx()]\n",
    "        new_bond_node = graph.new_node('bond', features=bond_features(bond))\n",
    "        new_bond_node.add_neighbors((atom1_node, atom2_node))\n",
    "        atom1_node.add_neighbors((atom2_node,))\n",
    "\n",
    "    mol_node = graph.new_node('molecule')\n",
    "    mol_node.add_neighbors(graph.nodes['atom'])\n",
    "    return graph"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
